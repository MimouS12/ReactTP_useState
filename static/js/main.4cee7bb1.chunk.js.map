{"version":3,"sources":["components/form/Form.js","components/tasksList/elems/Elem.js","components/tasksList/TasksList.js","App.js","serviceWorker.js","index.js"],"names":["memo","addTask","useState","isVisible","setIsVisible","title","setTitle","duration","setDuration","type","setType","date","setDate","description","setDescription","inputTitle","useRef","inputType","inputDate","inputDescription","className","onClick","name","ref","value","onChange","e","target","Elem","id","details","children","deleteTask","updateTask","updateMode","setUpdateMode","titleToUpdate","setTitleToUpdate","durationToUpdate","setDurationToUpdate","typeToUpdate","setTypeToUpdate","dateToUpdate","setDateToUpdate","descriptionToUpdate","setDescriptionToUpdate","TasksList","tasks","map","task","key","App","setTasks","newTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4cee7bb1.chunk.js","sourcesContent":["import React, { useState ,useRef , memo} from 'react';\r\nimport './Form.css';\r\nfunction Form({addTask}){\r\n  \r\n  const [isVisible,setIsVisible]=useState(true)\r\n  const toggleVisibility=()=>{\r\n      setIsVisible(!isVisible)\r\n  }\r\n    const [title,setTitle]=useState(\"Learn \")\r\n    const [duration , setDuration]=useState(0)\r\n    const [type,setType]=useState(\"IT \")\r\n    const [date,setDate]=useState()\r\n    const [description,setDescription]=useState(\"INMA \")\r\n    const inputTitle = useRef(null)\r\n    const inputType = useRef(null)\r\n    const inputDate = useRef(null)\r\n    const inputDescription = useRef(null)\r\n  \r\n    const handleAddTask=()=>{\r\n        addTask(title,duration,{type,date},description)\r\n        //setTitle(\"\")\r\n       // setDuration(0)\r\n      //  inputTitle.current.focus()\r\n    }\r\n     \r\n    return (\r\n     \r\n     <div>\r\n       <button className=\"button tog\" onClick={toggleVisibility}>Ajouter Task (ouvrir formulaire)</button>\r\n       \r\n       <div>\r\n       \r\n    {!isVisible && (\r\n      <>\r\n      <div className=\"form-body\">\r\n      \r\n        <div className=\"task-elem\">\r\n        <label>Titre :</label>\r\n        <input\r\n         type=\"text\"\r\n          name =\"title\"\r\n          className=\"nomrech\"\r\n          ref={inputTitle}\r\n          value={title}\r\n          onChange={e => setTitle(e.target.value)}\r\n          />   \r\n          </div>\r\n          <div className=\"task-elem\">\r\n          <label>Duration :</label>\r\n        <input type=\"number\" \r\n               value={duration}\r\n               name=\"duration\"\r\n               className=\"numrech\"\r\n               onChange={e=> setDuration( e.target.value )}\r\n        />\r\n        </div>\r\n        <div className=\"task-elem\">\r\n          <label>Description : </label>\r\n          <input\r\n          type=\"text\"\r\n          name =\"description\"\r\n          ref={inputDescription}\r\n          value={description}\r\n          onChange={e => setDescription(e.target.value)}\r\n          />   \r\n        </div>     \r\n        <div className=\"task-elem \">\r\n\r\n          <b>Details</b>\r\n          <div className=\"type-date\">\r\n          <label>Type :</label>\r\n          <input\r\n              type=\"text\"\r\n             name =\"type\"\r\n             \r\n             ref={inputType}\r\n             value={type}\r\n             onChange={e => setType(e.target.value)}\r\n          />   \r\n          </div>\r\n          <div className=\"type-date\">\r\n             <label> Date :</label>\r\n\r\n               <input\r\n                   type=\"date\"\r\n                   name =\"date\"\r\n                   ref={inputDate}\r\n                   \r\n                   onChange={e => setDate(e.target.value)}\r\n                />  \r\n           </div>\r\n\r\n        </div>\r\n        \r\n\r\n        <button className=\"button add\"  onClick={handleAddTask} >Add a task</button>\r\n\r\n        </div>\r\n        \r\n       </> \r\n    )}\r\n   </div>\r\n  \r\n </div>\r\n\r\n\r\n        \r\n        )\r\n}\r\nexport default memo(Form) ;","import React , { useState }  from 'react';\r\nimport propTypes from 'prop-types'\r\nimport './Elem.css';\r\nfunction Elem({id,title,duration,details,children,deleteTask,updateTask}){\r\n\r\n    const [updateMode,setUpdateMode]=useState(false)   \r\n    const [titleToUpdate , setTitleToUpdate]=useState(title)\r\n    const[durationToUpdate, setDurationToUpdate]=useState(duration)\r\n    const[typeToUpdate, setTypeToUpdate]=useState(details.type)\r\n    const[dateToUpdate, setDateToUpdate]=useState(details.date)\r\n    const[descriptionToUpdate, setDescriptionToUpdate]=useState(children)\r\n    \r\n    const handleUpdateTask =()=>{\r\n        details.type=typeToUpdate\r\n        details.date=dateToUpdate\r\n        updateTask(id,titleToUpdate,durationToUpdate,details,descriptionToUpdate)\r\n        setUpdateMode(false)\r\n\r\n    }\r\n\r\n    return(\r\n      \r\n        <div className=\"form-elem\">\r\n           {!updateMode ? (\r\n            <>\r\n               <div >{title} ( {duration} m) </div> \r\n         \r\n               {details && \r\n               \r\n                     <div>{details.type} - {details.date}</div>  \r\n               \r\n               }\r\n               \r\n               <div>{children}</div>\r\n               <div>  \r\n                   <button className=\"button update\" onClick={()=> setUpdateMode(true)}> Update </button>\r\n                   <button className=\"button delete\" onClick={() => deleteTask(id)} > Delete </button>\r\n                      \r\n               </div>  \r\n            </>\r\n        ) : (\r\n            <div>\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={titleToUpdate}\r\n              onChange={e => setTitleToUpdate(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"number\"\r\n              value={durationToUpdate}\r\n              name=\"duration\"\r\n              onChange={e => setDurationToUpdate(e.target.value)}\r\n            />\r\n             <input\r\n              type=\"text\"\r\n              value={typeToUpdate}\r\n              name=\"type\"\r\n              onChange={e => setTypeToUpdate(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"date\"\r\n              value={dateToUpdate}\r\n              name=\"date\"\r\n              onChange={e => setDateToUpdate(e.target.value)}\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              value={descriptionToUpdate}\r\n              name=\"description\"\r\n              onChange={e => setDescriptionToUpdate(e.target.value)}\r\n            />\r\n            <button className=\"button update\" onClick={handleUpdateTask}>\r\n              Update a task\r\n            </button>\r\n          </div>\r\n\r\n           )}\r\n        </div>\r\n\r\n       \r\n    )\r\n}\r\nElem.propTypes={\r\n    title :propTypes.string.isRequired,\r\n    duration :propTypes.number ,\r\n    details : propTypes.object.isRequired,\r\n   \r\n}\r\nexport default Elem ;\r\n\r\n","import React, { useState } from 'react';\r\nimport Elem from './elems/Elem.js';\r\nfunction TasksList({tasks , deleteTask, updateTask}){\r\n    \r\n    const [isVisible,setIsVisible]=useState(true)\r\n    const toggleVisibility=()=>{\r\n        setIsVisible(!isVisible)\r\n    }\r\n    return(\r\n        <div>\r\n            <button className=\"button tog\" onClick={toggleVisibility}>Toggle visibility </button>\r\n            <div>\r\n             \r\n          {!isVisible && tasks.map(task=>(\r\n              <Elem key ={task.id} id={task.id} title={task.title} duration={task.duration} details={task.details} deleteTask={deleteTask} updateTask={updateTask}>\r\n                  {task.description}  \r\n              </Elem>\r\n             ))}  \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\nexport default TasksList ;\r\n/*<Elem title={props.tab[0]} duration={props.tab[1]} type={props.tab[2].type} date={props.tab[2].date}Sayhello={Sayhello}  />\r\n       <Elem   title={props.tab[0]} duration={props.tab[1]} type={props.tab[2].type} date={props.tab[2].date} Sayhello={Sayhello}/>\r\n        <Elem title={props.tab[0]} duration={props.tab[1]} type={props.tab[2].type} date={props.tab[2].date} Sayhello={Sayhello}/> */","import React, { useState } from 'react';\n//import logo from './logo.svg';\nimport Form from './components/form/Form'\nimport TasksList from './components/tasksList/TasksList'\n\nimport './App.css';\n\n\nfunction App() {\n  const steps =[\"Enter the task title\",\"click on add task\"]\n  let loading = false\nconst [tasks , setTasks]=useState([\n  {id :\"1\",\n  title:\"Learn HTML\",\n  duration:60, \n  details:{type:\"IT\",date:\"2020-03-06\"},\n  description :\"INMA hello!!!!!!!!!!!!!!\"\n  },\n  {id :\"2\",\n  title:\"Learn react\",\n  duration:120, \n  details:{type:\"IT\",date:\"2020-03-06\"},\n  description :\"INMA only  !!!!!!!!\"\n  },\n  { id :\"3\",\n    title:\"Learn node\",\n    duration:30, \n    details:{type:\"IT\",date:\"2020-03-06\"},\n    description :\"INMA dream !!!!!!!!!\"\n  }\n])\nconst addTask =(title, duration,details,description)=>{\n  setTasks([...tasks,{title,duration,details,description}])\n //tasks.push({title , duration })\n}\nconst deleteTask = (id) => {\n  const newTasks=tasks.filter(task=>task.id!==id)\n  setTasks(newTasks)\n}\nconst updateTask =(id,title, duration,details,description)=>{\n  const newTasks = tasks.map(task => task.id ===id ? ({title,duration,details,description}):task)\n  setTasks(newTasks)\n}\n  \n  return (\n    <div className=\"App\" >\n       {loading && <div>Loading ... </div>}\n       {!loading && (\n         <div>\n        <Form addTask={addTask}/> \n         <TasksList tasks={tasks}\n                    deleteTask={deleteTask}\n                    updateTask={updateTask}\n         />\n         </div>\n         )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}